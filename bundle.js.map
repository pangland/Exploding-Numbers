{"version":3,"sources":["webpack:///webpack/bootstrap c1a43e651dea64713ac8","webpack:///./lib/exploding_numbers.js","webpack:///./lib/game.js","webpack:///./lib/number.js","webpack:///./lib/equations.js","webpack:///./lib/game_view.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;;;;AC7DA;AAAA;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,MAAM;;AAEN;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;;AAEA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA,MAAM;AACN,CAAC;;;;;;;;;;AC/CD;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,oCAAoC;AACvD;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;;AAEA,aAAa;AACb,aAAa;AACb,aAAa;;;AAGb;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;;;AAGL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,KAAK;;;AAGL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;;AAEA,4BAA4B,gDAAgD;AAC5E;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,WAAW;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;;;;;;;ACvRA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;;;AAIA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACxHA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,uBAAuB,WAAW,KAAK,YAAY;AACnD;;AAEA;AACA;AACA;AACA,uBAAuB,WAAW,KAAK,YAAY;AACnD;;AAEA;AACA;AACA;AACA,mBAAmB,mBAAmB;AACtC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,yBAAyB,WAAW,KAAK,YAAY;AACrD,KAAK;AACL;AACA;AACA,yBAAyB,WAAW,KAAK,YAAY;AACrD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,WAAW,KAAK,YAAY;AACnD;AACA;;AAEA;;;;;;;AChFA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA","file":"./bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap c1a43e651dea64713ac8","// const Game = require(\"./game\");\n// const GameView = require(\"./game_view\");\nimport Game from './game.js';\nimport GameView from './game_view.js';\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const canvas = document.getElementById(\"game-canvas\");\n  canvas.width = 1000;\n  canvas.height = 550;\n\n  const ctx = canvas.getContext(\"2d\");\n  const game = new Game();\n  ctx.fillStyle = \"black\";\n  ctx.fillRect(0, 0, 1000, 550);\n\n  function handleClick() {\n    game.handleClick(event, ctx);\n  }\n\n  // canvas.addEventListener(\"click\", (e) => {\n  //   game.handleClick(e, ctx);\n  // });\n\n  canvas.addEventListener(\"click\", handleClick);\n\n  new GameView(game, ctx).start(() => {\n    // canvas.removeEventListener();\n    // const won = game.won();\n    // won ? console.log('whoopio kaya badoobaaa') : console.log(\"whoops\");\n    ctx.font = '50pt Arial';\n    ctx.color = 'white';\n    if (game.won()) {\n      ctx.fillText('YOU SAVED MATH!', 50, 150);\n    } else {\n      ctx.fillText('Your math is worse than my coding', 100, 150);\n    }\n\n    // canvas.parentNode.replaceChild(canClone, canvas);\n\n    // clone = canvas.cloneNode(true);\n    // canvas.parentNode.replaceChild(clone, canvas);\n    canvas.removeEventListener('click', handleClick);\n  });\n\n  // canvas.addEventListener(\"onMouseDown\", (e) => {\n  //   game.handleHoldDown(e,)\n  // });\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/exploding_numbers.js\n// module id = 0\n// module chunks = 0","import Number from './number.js';\nimport Equations from './equations.js';\n\nconst horPositions = [0, 100, 200, 300, 400, 500, 600, 700, 800, 900];\nconst blocksPerColumn = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\nconst selectedNumbers = [];\n\nclass Game {\n  constructor() {\n    this.allNumberBlocks = [[], [], [], [], [], [], [], [], [], []];\n    this.fallingNumberBlocks = [[], [], [], [], [], [], [], [], [], []];\n    this.staticNumberBlocks = [[], [], [], [], [], [], [], [], [], []];\n\n\n    this.selectedNumbers = [];\n    this.equations = new Equations();\n  }\n\n  won() {\n    let truthiness = true;\n    for (let i = 0; i < this.staticNumberBlocks.length; i++) {\n      if (!truthiness) break;\n      if (this.staticNumberBlocks[i].length !== 0) {\n        truthiness = false;\n      }\n    }\n\n    return truthiness;\n  }\n\n  over() {\n    let truthiness = true;\n    for (let i = 0; i < blocksPerColumn.length; i++) {\n      if (!truthiness) break;\n      if (blocksPerColumn[i] < 5) {\n        truthiness = false;\n      }\n    }\n\n    return truthiness;\n  }\n\n  fillBottomRow() {\n    const vertPosition = 450;\n    horPositions.forEach((pos, idx) => {\n      const newNumber = new Number([pos, vertPosition]);\n      this.allNumberBlocks[idx].push(newNumber);\n      this.staticNumberBlocks[idx].push(newNumber);\n      this.incrementBlocksPerColumn(idx);\n    });\n\n    this.newEquation();\n  }\n\n  createNumber() {\n    const randomColumn = this.randomStartingPos();\n    this.incrementBlocksPerColumn(Math.round(randomColumn / 100));\n    const newNumber = new Number([randomColumn, 50]);\n    this.fallingNumberBlocks[randomColumn / 100].push(newNumber);\n    this.allNumberBlocks[randomColumn / 100].push(newNumber);\n  }\n\n  incrementBlocksPerColumn(columnNumber) {\n    blocksPerColumn[columnNumber] = blocksPerColumn[columnNumber] + 1;\n  }\n\n  decrementBlocksPerColumn(columnNumber) {\n    blocksPerColumn[columnNumber] -= 1;\n  }\n\n  randomStartingPos() {\n    const filteredPositions = [];\n    horPositions.forEach((column, idx) => {\n      if (!this.fallingNumberBlocks[idx][0] && blocksPerColumn[idx] < 5) {\n        filteredPositions.push(horPositions[idx]);\n      } else if (blocksPerColumn[idx] < 5 && this.fallingNumberBlocks[idx].slice(-1)[0].pos[1] >= 150) {\n        filteredPositions.push(horPositions[idx]);\n      }\n    });\n    return filteredPositions[Math.floor(Math.random() * 10) % filteredPositions.length];\n  }\n\n  move() {\n    this.fallingNumberBlocks.forEach((column, idx) => {\n      while (column[0] && column[0]\n        .checkCollision(this.staticNumberBlocks[idx].slice(-1)[0])) {\n        column[0].syncPosition(450 - 100 * this.staticNumberBlocks[idx].length);\n        this.staticNumberBlocks[idx].push(column.shift());\n      }\n\n      if (column[0]) column[0].move();\n      column.slice(1).forEach((number, jdx) => {\n        if (!number.checkCollision(this.fallingNumberBlocks[idx][jdx])) {\n          number.move();\n        }\n      });\n    });\n  }\n\n  draw(ctx) {\n    const numbers = this.selectedNumbers.map((num) => num.number);\n\n    ctx.fillStyle = \"black\";\n    ctx.fillRect(0, 0, 1000, 550);\n    ctx.fillStyle = \"white\";\n    ctx.fillText(\"Answer: \" + numbers.join(''), 400, 45);\n    this.allNumberBlocks.forEach((numberColumn) => {\n      numberColumn.forEach((number) => number.draw(ctx));\n    });\n    this.equations.draw(ctx);\n  }\n\n  handleClick(e, ctx) {\n    this.allNumberBlocks.forEach((columns) => {\n      columns.forEach((number) => {\n        if (number.isClicked(e.offsetX, e.offsetY)) {\n          this.handleNumber(number);\n          this.correctMatch();\n          this.draw(ctx);\n        }\n      });\n    });\n  }\n\n  // Number {pos: Array(2), vel: 0.8010193312934939, color: \"blue\", selected: false, number: 9}\n  // Number {pos: Array(2), vel: 0.8010193312934939, color: \"blue\", selected: true, number: 9}\n  // Number {pos: Array(2), vel: 0.8010193312934939, color: \"blue\", selected: true, number: 9}\n\n\n  handleNumber(number) {\n    number.toggleColor();\n    const indexOfNumber = this.selectedNumbers.indexOf(number);\n    // debugger\n\n    if (indexOfNumber === -1) {\n      this.selectedNumbers.push(number);\n    } else {\n      this.selectedNumbers.splice(indexOfNumber, 1);\n    }\n  }\n\n  correctMatch() {\n    // debugger\n    let numberProperty = this.selectedNumbers.map((number) => {\n      return number.number;\n    });\n\n\n    if (numberProperty.join('') === this.equationSolution.join('')) {\n      this.removeNumbers();\n      this.newEquation();\n    }\n  }\n\n  removeNumbers() {\n    this.staticNumberBlocks.forEach((column, idx) => {\n      let i = 0;\n      while (i < column.length) {\n        let selectedCount = this.selectedNumbers.length;\n        this.selectedNumbers.forEach((number, jdx) => {\n          const relevantIndex = this.staticNumberBlocks[idx].indexOf(number);\n          if (relevantIndex !== -1) {\n            this.selectedNumbers.splice(jdx, 1);\n            this.handleStaticDeletion(idx, relevantIndex);\n            this.decrementBlocksPerColumn(idx);\n          }\n        });\n        if (selectedCount === this.selectedNumbers.length) {\n          i++;\n        }\n      }\n    });\n\n\n    if (this.selectedNumbers.length > 0) {\n      this.fallingNumberBlocks.forEach((column, idx) => {\n        let i = 0;\n        while (i < column.length) {\n          let selectedCount = this.selectedNumbers.length;\n          this.selectedNumbers.forEach((number, jdx) => {\n            const relevantIndex = this.fallingNumberBlocks[idx].indexOf(number);\n            if (relevantIndex !== -1) {\n              this.selectedNumbers.splice(jdx, 1);\n              this.handleFallingDeletion(idx, relevantIndex);\n              this.decrementBlocksPerColumn(idx);\n            }\n          });\n          if (selectedCount === this.selectedNumbers.length) {\n            i++;\n          }\n        }\n      });\n    }\n    this.selectedNumbers = [];\n  }\n\n  handleStaticDeletion(outerIndex, innerIndex) {\n    this.staticNumberBlocks[outerIndex].splice(innerIndex, 1);\n    this.allNumberBlocks[outerIndex].splice(innerIndex, 1);\n\n    for (let i = innerIndex; i < this.staticNumberBlocks[outerIndex].length; i++) {\n      this.staticNumberBlocks[outerIndex][i].downshift();\n    }\n  }\n\n  handleFallingDeletion(outerIndex, innerIndex) {\n    this.fallingNumberBlocks[outerIndex].splice(innerIndex, 1);\n\n    const staticsInRow = this.staticNumberBlocks[outerIndex].length;\n\n    this.allNumberBlocks[outerIndex].splice(innerIndex + staticsInRow, 1);\n  }\n\n  newEquation() {\n    let allNumbers = [].concat.apply([], this.allNumberBlocks);\n    allNumbers = allNumbers.sort(() => Math.random());\n    console.log(allNumbers);\n    const numbersToGrab = Math.floor(Math.random() * allNumbers.length % 3) + 1;\n\n    let equationSolution = allNumbers.slice(0, numbersToGrab);\n    equationSolution = equationSolution.map((number) => {\n      return number.number;\n    });\n\n    while (equationSolution[0] === 0 && equationSolution.length > 1) {\n      equationSolution = equationSolution.slice(1);\n    }\n    this.equationSolution = equationSolution;\n\n    this.equations.generateNewEquation(equationSolution);\n  }\n\n\n}\n\nexport default Game;\n// module.exports = Game;\n\n// const Asteroid = require(\"./asteroid.js\");\n// // const Bullet = require(\"./bullet.js\");\n// // const Ship = require(\"./ship.js\");\n//\n// function Game () {\n//   const DIM_X = 500;\n//   const DIM_Y = 500;\n//   const NUM_ASTEROIDS = 30;\n//\n//   this.asteroids = this.addAsteroids(NUM_ASTEROIDS, DIM_X, DIM_Y);\n// }\n//\n// Game.prototype.addAsteroids = function (count, dimX, dimY) {\n//   const asteroids = [];\n//\n//   for (let i = 0; i < count; i++) {\n//     asteroids.push(new Asteroid(this.randomPosition(dimX, dimY)));\n//   }\n//\n//   return asteroids;\n// };\n//\n// Game.prototype.randomPosition = function (dimX, dimY) {\n//   let randX = Math.random() * dimX;\n//   let randY = Math.random() * dimY;\n//   return [randX, randY];\n// };\n//\n// Game.prototype.draw = function (ctx) {\n//   ctx.clearRect(0,0,500,500);\n//   this.asteroids.forEach(function (el) {\n//     el.draw(ctx);\n//   });\n// };\n//\n// Game.prototype.move = function () {\n//   this.asteroids.forEach(function (el) {\n//     el.move();\n//   });\n// };\n//\n// module.exports = Game;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/game.js\n// module id = 1\n// module chunks = 0","// import MovingObject from './moving_object.js';\n\nconst colors = [\"pink\", \"red\", \"blue\", \"lightblue\", \"darkblue\"];\nconst numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n\n// 'extends MovingObject' for if we end up using it\nclass Number {\n  constructor(pos) {\n    this.pos = pos;\n    this.vel = this.randomVel();\n    this.color = this.randomColor();\n    this.selected = false;\n\n    this.number = Math.floor(Math.random() * 10);\n  }\n\n  draw(ctx) {\n    // ctx.fillStyle = \"black\";\n    // ctx.fillRect(this.pos[0], this.pos[1] - this.vel * 10, 100, 100);\n    ctx.fillStyle = this.selected ? \"gray\" : this.color;\n    ctx.font = '17pt Arial';\n\n    // ctx.fillRect(this.pos[0], this.pos[1], 100, 100);\n    // ctx.fillStyle = \"black\";\n    ctx.beginPath();\n    ctx.moveTo(this.pos[0] + 10, this.pos[1]);\n    ctx.lineTo(this.pos[0] + 90, this.pos[1]);\n    ctx.quadraticCurveTo(this.pos[0] + 100, this.pos[1], this.pos[0] + 100, this.pos[1] + 10);\n    ctx.lineTo(this.pos[0] + 100, this.pos[1] + 90);\n    ctx.quadraticCurveTo(this.pos[0] + 100, this.pos[1] + 100, this.pos[0] + 90, this.pos[1] + 100);\n    ctx.lineTo(this.pos[0] + 10, this.pos[1] + 100);\n    ctx.quadraticCurveTo(this.pos[0], this.pos[1] + 100, this.pos[0], this.pos[1] + 90);\n    ctx.lineTo(this.pos[0], this.pos[1] + 10);\n    ctx.quadraticCurveTo(this.pos[0], this.pos[1], this.pos[0] + 10, this.pos[1]);\n    ctx.stroke();\n    ctx.fill();\n\n    ctx.fillStyle = \"black\";\n    ctx.fillText(this.number, this.pos[0] + 43, this.pos[1] + 60);\n  }\n\n  move() {\n    this.pos[1] = this.pos[1] + this.vel;\n  }\n\n  randomVel() {\n    let randomBase = Math.random();\n    randomBase = randomBase < .1 ? .1 : randomBase;\n\n    return randomBase / 2;\n  }\n\n  randomColor() {\n    return colors[Math.floor(Math.random() * 10) % colors.length];\n  }\n\n  checkCollision(otherNum) {\n    if (typeof otherNum === \"undefined\") {\n      return this.pos[1] + this.vel + 100 > 550\n    } else {\n      return this.pos[1] + this.vel + 100 > otherNum.pos[1];\n    }\n  }\n\n  syncPosition(height) {\n    this.pos[1] = height;\n  }\n\n  isClicked(mouseX, mouseY) {\n    const pos = this.pos;\n    const verticalMatch = mouseY >= pos[1] && mouseY < pos[1] + 100;\n    const horizontalMatch = mouseX >= pos[0] && mouseX < pos[0] + 100;\n    return verticalMatch && horizontalMatch;\n  }\n\n  downshift() {\n    this.pos[1] = this.pos[1] + 100;\n  }\n\n  toggleColor() {\n    this.selected = this.selected ? false : true;\n  }\n}\n\nexport default Number;\n// module.exports = Number;\n\n\n\n// Spacerock. It inherits from MovingObject.\n\n\n\n\n// const MovingObject = require(\"./moving_object.js\");\n// const Util = require(\"./utils.js\");\n//\n//\n//\n// Util.inherits(Asteroid, MovingObject);\n//\n// function Asteroid(pos) {\n//   const COLOR = \"pink\";\n//   const RADIUS = 4;\n//\n//   const astProperties = {\n//     pos: pos,\n//     vel: randomVec(5),\n//     color: COLOR,\n//     radius: RADIUS\n//   };\n//\n//   MovingObject.call(this, astProperties);\n// }\n//\n// const randomVec = function (length) {\n//   const deg = 2 * Math.PI * Math.random();\n//   return Util.scale([Math.sin(deg), Math.cos(deg)], length);\n// };\n//\n// module.exports = Asteroid;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/number.js\n// module id = 2\n// module chunks = 0","class Equations {\n  constructor() {\n    this.equationCount = 0;\n    this.operations = ['+', '-', '*', '/'];\n    this.equation = \"\";\n  }\n\n  draw(ctx) {\n    ctx.fillStyle = \"white\";\n    ctx.fillText('Expression: ' + this.equation, 400, 20);\n  }\n\n  generateNewEquation(numberArray) {\n    this.equationCount++;\n    let solution;\n\n    if (numberArray.length > 1) {\n      solution = parseInt(numberArray.join(''));\n    } else {\n      solution = numberArray[0];\n    }\n\n    const operation = this.operations[Math.floor(Math.random() * 4)];\n    switch (operation) {\n      case '+':\n        this.add(solution);\n        break;\n      case '-':\n        this.subtract(solution);\n        break;\n      case '*':\n        this.multiply(solution);\n        break;\n      case '/':\n        this.divide(solution);\n        break;\n    }\n  }\n\n  add(solution) {\n    const firstValue = Math.floor(Math.random() * solution);\n    const secondValue = solution - firstValue;\n    this.equation = `${firstValue} + ${secondValue}`;\n  }\n\n  subtract(solution) {\n    const firstValue = Math.floor(Math.random() * 5 * this.equationCount + solution);\n    const secondValue = firstValue - solution;\n    this.equation = `${firstValue} - ${secondValue}`;\n  }\n\n  multiply(solution) {\n    const factors = [];\n    if (solution > 0) factors.push(1);\n    for (let i = 2; i <= solution / 2; i++) {\n      if (solution % i === 0) {\n        factors.push(i);\n      }\n    }\n\n    if (solution === 0) {\n      const firstValue = factors[Math.floor(Math.random() * 3 * this.equationCount)];\n      const secondValue = 0;\n      this.equation = `${firstValue} * ${secondValue}`;\n    } else {\n      const firstValue = factors[Math.floor(Math.random() * factors.length)];\n      const secondValue = solution / firstValue;\n      this.equation = `${firstValue} * ${secondValue}`;\n    }\n    debugger\n  }\n\n  divide(solution) {\n    const firstValue = solution * (Math\n      .floor(Math.random() * this.equationCount + 1));\n    const secondValue = firstValue === 0 ? 1 : firstValue / solution;\n    this.equation = `${firstValue} / ${secondValue}`;\n  }\n}\n\nexport default Equations;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/equations.js\n// module id = 3\n// module chunks = 0","class GameView {\n  constructor(game, ctx) {\n    this.game = game;\n    this.ctx = ctx;\n  }\n\n  start(callback) {\n    this.game.fillBottomRow();\n    this.game.draw(this.ctx);\n\n    const gameInterval = setInterval(() => {\n      this.game.move();\n      this.game.createNumber();\n      this.game.draw(this.ctx);\n    }, 4000);\n\n    // setInterval(() => {\n    //   this.game.createNumber();\n    //   this.game.draw(this.ctx);\n    // }, 2000);\n    const moveInterval = setInterval(() => {\n      this.game.move();\n      this.game.draw(this.ctx);\n      if (this.game.won() || this.game.over()) {\n        debugger\n        clearInterval(gameInterval);\n        clearInterval(moveInterval);\n        callback();\n      }\n    }, 10);\n  }\n}\n\nmodule.exports = GameView;\n// export default GameView;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/game_view.js\n// module id = 4\n// module chunks = 0"],"sourceRoot":""}